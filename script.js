// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
function calculateRisk() {
    const entryPrice = parseFloat(entryPriceInput.value) || 0;
    const leverage = parseFloat(leverageInput.value) || 1;
    const atr = parseFloat(atrInput.value) || 0;
    const riskPercent = parseFloat(riskPercentInput.value) / 100;
    const riskAmount = parseFloat(riskAmountInput.value) || 0;
    const rewardRatio1 = parseFloat(rewardRatio1Input.value) || 3;
    const rewardRatio2 = parseFloat(rewardRatio2Input.value) || 5;
    const stopLossPriceDirect = parseFloat(stopLossPriceInput.value) || 0;

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
    let stopLossPrice;
    if (stopMethod === 'atr') {
        if (isLong) {
            stopLossPrice = entryPrice - (atr * riskPercent);
        } else {
            stopLossPrice = entryPrice + (atr * riskPercent);
        }
    } else {
        if (stopLossPriceDirect > 0) {
            if ((isLong && stopLossPriceDirect < entryPrice) ||
                (!isLong && stopLossPriceDirect > entryPrice)) {
                stopLossPrice = stopLossPriceDirect;
            } else {
                if (isLong) {
                    stopLossPrice = entryPrice - (atr * riskPercent);
                } else {
                    stopLossPrice = entryPrice + (atr * riskPercent);
                }
                stopLossPriceInput.value = stopLossPrice.toFixed(8);
            }
        } else {
            if (isLong) {
                stopLossPrice = entryPrice - (atr * riskPercent);
            } else {
                stopLossPrice = entryPrice + (atr * riskPercent);
            }
        }
    }

    // –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    const priceDifference = Math.abs(entryPrice - stopLossPrice);
    const positionSize = priceDifference > 0 ? (riskAmount / priceDifference) : 0;

    // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
    const liquidationPrice = isLong 
        ? entryPrice * (1 - (1 / leverage)) 
        : entryPrice * (1 + (1 / leverage));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    entryPriceResult.textContent = `${entryPrice.toFixed(8)} USDT`;
    positionSizeSpan.textContent = `${formatNumber(positionSize)}`;
    stopLossSpan.textContent = `${stopLossPrice.toFixed(8)} USDT`;
    atrResultSpan.textContent = `${atr.toFixed(8)} USDT`;
    liquidationPriceSpan.textContent = `${liquidationPrice.toFixed(8)} USDT`;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    generateTakeProfitLevels(entryPrice, stopLossPrice, isLong, rewardRatio1, rewardRatio2, positionSize);
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatNumber(num) {
    if (num === 0) return '0';
    
    // –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
    if (Math.abs(num) < 0.000001 || Math.abs(num) > 1000000) {
        return num.toExponential(6);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    const absNum = Math.abs(num);
    let precision;
    
    if (absNum >= 1000) {
        precision = 2;
    } else if (absNum >= 1) {
        precision = 4;
    } else if (absNum >= 0.01) {
        precision = 6;
    } else {
        precision = 8;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏
    return num.toFixed(precision).replace(/(\.0*|(?<=\.\d*?)0*)$/, '');
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
function exportToText() {
    const entryPrice = parseFloat(entryPriceInput.value) || 0;
    const leverage = parseFloat(leverageInput.value) || 1;
    const atr = parseFloat(atrInput.value) || 0;
    const riskPercent = parseFloat(riskPercentInput.value) || 0;
    const riskAmount = parseFloat(riskAmountInput.value) || 0;

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
    let tradeTypeName = '';
    switch (tradeType) {
        case 'long-breakout': tradeTypeName = '–õ–æ–Ω–≥ –ü—Ä–æ–±–æ–π'; break;
        case 'long-fakeout': tradeTypeName = '–õ–æ–Ω–≥ –õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π'; break;
        case 'short-breakout': tradeTypeName = '–®–æ—Ä—Ç –ü—Ä–æ–±–æ–π'; break;
        case 'short-fakeout': tradeTypeName = '–®–æ—Ä—Ç –õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π'; break;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    const now = new Date();
    const formattedDate = `${now.getDate().toString().padStart(2, '0')}.${(now.getMonth()+1).toString().padStart(2, '0')}.${now.getFullYear()} ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const content = `
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–æ–≤ - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
===============================
–î–∞—Ç–∞: ${formattedDate}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${isLong ? '–õ–æ–Ω–≥' : '–®–æ—Ä—Ç'}
–¢–∏–ø —Å–¥–µ–ª–∫–∏: ${tradeTypeName}
–ú–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: ${stopMethod === 'atr' ? '–ü–æ ATR' : '–ü–æ —Ü–µ–Ω–µ'}

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏:
-----------------
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entryPrice.toFixed(8)} USDT
–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: ${leverage}x
ATR: ${atr.toFixed(8)} USDT
–†–∏—Å–∫ —Å—Ç–æ–ø-–ª–æ—Å—Å: ${riskPercent}% –æ—Ç ATR
–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: ${riskAmount.toFixed(8)} USDT
–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: 1:${rewardRatio1Input.value} –∏ 1:${rewardRatio2Input.value}

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
-----------
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entryPrice.toFixed(8)} USDT
–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${formatNumber(riskAmount / Math.abs(entryPrice - parseFloat(stopLossSpan.textContent.split(' ')[0])))}
–°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLossSpan.textContent}

–£—Ä–æ–≤–Ω–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:
${Array.from(document.getElementById('takeProfitLevels').children).map(el =>
    '‚Ä¢ ' + el.textContent.trim().replace(/\s+/g, ' ')
).join('\n')}

–¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: ${liquidationPriceSpan.textContent}

–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏:
–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: ${riskAmount.toFixed(8)} USDT
–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω—ã: ${Math.abs(entryPrice - parseFloat(stopLossSpan.textContent.split(' ')[0])).toFixed(8)} USDT
–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = –†–∏—Å–∫ / –†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω—ã = ${riskAmount.toFixed(8)} / ${Math.abs(entryPrice - parseFloat(stopLossSpan.textContent.split(' ')[0])).toFixed(8)} = ${formatNumber(riskAmount / Math.abs(entryPrice - parseFloat(stopLossSpan.textContent.split(' ')[0])))}
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `—Ä–∞—Å—á–µ—Ç_—Ä–∏—Å–∫–æ–≤_${formattedDate.replace(/[:.]/g, '-').replace(' ', '_')}.txt`;
    a.click();
    URL.revokeObjectURL(url);
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendToTelegram() {
    const botToken = '8044055704:AAGk8cQFayPqYCscLlEB3qGRj0Uw_NTpe30';
    const chatId = '1720793889';

    const entryPrice = parseFloat(entryPriceInput.value) || 0;
    const leverage = parseFloat(leverageInput.value) || 1;
    const atr = parseFloat(atrInput.value) || 0;
    const riskPercent = parseFloat(riskPercentInput.value) || 0;
    const riskAmount = parseFloat(riskAmountInput.value) || 0;

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
    let tradeTypeName = '';
    switch (tradeType) {
        case 'long-breakout': tradeTypeName = '–õ–æ–Ω–≥ –ü—Ä–æ–±–æ–π'; break;
        case 'long-fakeout': tradeTypeName = '–õ–æ–Ω–≥ –õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π'; break;
        case 'short-breakout': tradeTypeName = '–®–æ—Ä—Ç –ü—Ä–æ–±–æ–π'; break;
        case 'short-fakeout': tradeTypeName = '–®–æ—Ä—Ç –õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π'; break;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    const now = new Date();
    const formattedDate = `${now.getDate().toString().padStart(2, '0')}.${(now.getMonth()+1).toString().padStart(2, '0')}.${now.getFullYear()} ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const positionSize = riskAmount / Math.abs(entryPrice - parseFloat(stopLossSpan.textContent.split(' ')[0]));
    const priceDifference = Math.abs(entryPrice - parseFloat(stopLossSpan.textContent.split(' ')[0]));

    const messageText = `
üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏* üìä
*–î–∞—Ç–∞:* ${formattedDate}

*–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* ${isLong ? '–õ–æ–Ω–≥' : '–®–æ—Ä—Ç'} (${tradeTypeName})
*–ú–µ—Ç–æ–¥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:* ${stopMethod === 'atr' ? '–ü–æ ATR' : '–ü–æ —Ü–µ–Ω–µ'}

*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏:*
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entryPrice.toFixed(8)} USDT
–ü–ª–µ—á–æ: ${leverage}x
ATR: ${atr.toFixed(8)} USDT
–†–∏—Å–∫ —Å—Ç–æ–ø-–ª–æ—Å—Å: ${riskPercent}%
–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: ${riskAmount.toFixed(8)} USDT
–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ TP: 1:${rewardRatio1Input.value} –∏ 1:${rewardRatio2Input.value}

*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${formatNumber(positionSize)}
–°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLossSpan.textContent}

*–£—Ä–æ–≤–Ω–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:*
${Array.from(document.getElementById('takeProfitLevels').children).map(el =>
    '‚Ä¢ ' + el.textContent.trim().replace(/\s+/g, ' ')
).join('\n')}

*–¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:* ${liquidationPriceSpan.textContent}

*–†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏:*
–†–∏—Å–∫ = ${riskAmount.toFixed(8)} USDT
–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω—ã = ${priceDifference.toFixed(8)} USDT
–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = ${riskAmount.toFixed(8)} / ${priceDifference.toFixed(8)} = ${formatNumber(positionSize)}

#${isLong ? 'Long' : 'Short'} #${tradeType.replace('-', '')} #RiskManagement
    `;

    try {
        const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: messageText,
                parse_mode: 'Markdown'
            })
        });

        const data = await response.json();

        if (data.ok) {
            showNotification('–†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!', 'success');
        } else {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + (data.description || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message, 'error');
    }
}
