<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏</title>
    <style>
        body {
            background-color: #121212;
            color: #ffffff;
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        
        .button-container {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        button {
            background-color: #1E88E5;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: #1565C0;
        }
        
        .text-display {
            background-color: #1e1e1e;
            padding: 15px;
            border-radius: 5px;
            white-space: pre-line;
            display: none;
            margin-top: 15px;
            border: 1px solid #333;
        }
        
        .action-btn {
            background-color: #4CAF50;
            padding: 8px 15px;
            margin-right: 10px;
        }
        
        .action-btn:hover {
            background-color: #45a049;
        }
        
        .export-btn {
            background-color: #2196F3;
        }
        
        .export-btn:hover {
            background-color: #0b7dda;
        }
        
        .action-buttons-container {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            display: none;
        }
        
        .checkbox-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .checkbox-item input {
            margin-right: 10px;
            cursor: pointer;
        }
        
        .status-message {
            margin-top: 15px;
            padding: 10px;
            border-radius: 5px;
            display: none;
        }
        
        .success {
            background-color: #2E7D32;
            color: white;
        }
        
        .error {
            background-color: #C62828;
            color: white;
        }
        
        .item-text {
            margin-left: 5px;
        }
    </style>
</head>
<body>
    <h2>–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏</h2>
    
    <div class="button-container">
        <button onclick="toggleText('breakthrough')">–ü—Ä–æ–±–æ–π</button>
        <button onclick="toggleText('falseBreakthrough')">–õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π</button>
    </div>
    
    <div id="breakthroughText" class="text-display">
        <h3>–ü—Ä–æ–±–æ–π</h3>

        <p>üìä–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏</p>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ë–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –õ–ü</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–±–ª–∏–∑–∏ —É—Ä–æ–≤–Ω—è –¥–æ 5%</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ü–æ—Å–ª–µ —Å–∏–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ—Ç –æ—Ç–∫–∞—Ç–∞</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–í–ø–µ—Ä–µ–¥–∏ —Å–≤–æ–±–æ–¥–Ω–∞—è –∑–æ–Ω–∞</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–í—ã–∫—É–ø–Ω–æ–π –±–∞—Ä(–∏–ª–∏ –ü—Ä–æ–¥–∞–∂–Ω—ã–π)</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ü—Ä–æ—Ç–æ—Ä–≥–æ–≤–∫–∞ –≤–±–ª–∏–∑–∏ —É—Ä–æ–≤–Ω—è(–Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ)</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥–∂–∞—Ç–∏–µ–º</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ü–æ–Ω–∏–∂–∞—é—â–∏–µ —Ö–∞–∏ –∏–ª–∏ –ª–æ–∏(–∏–ª–∏ –ø–æ–≤—ã—à–∞—é—â–∏–µ)</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ó–∞—Ç—É—Ö–∞–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏</span></div>
    </div>
    
    <div id="falseBreakthroughText" class="text-display">
        <h3>–õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π</h3>

        <p>üìä–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏</p>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–î–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ü–æ–¥—Ö–æ–¥ –Ω–∞ –±–æ–ª—å—à–∏—Ö –±–∞—Ä–∞—Ö</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–í—ã—Ö–æ–¥ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–±—ä–µ–º—ã –ø–µ—Ä–µ–¥ —É—Ä–æ–≤–Ω—è–º –Ω–∞ 1—á 4—á</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–≠–∫—Å—Ç—Ä–µ–º—É–º</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–í–ø–µ—Ä–µ–¥–∏ –∑–∞—Ä–∞–∂–µ–Ω–Ω–∞—è –∑–æ–Ω–∞</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–î–ª–∏–Ω–Ω–æ–µ –±–µ–∑–æ—Ç–∫–∞—Ç–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–¥–∞–ª–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –º–∏–Ω –æ—Ç 10%</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–†–µ–∑–∫–∏–π –ø–æ–¥—Ö–æ–¥ –Ω–∞ –ª–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ</span></div>

        <div class="checkbox-item"><input type="checkbox"><span class="item-text">–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</span></div>
    </div>
    
    <div id="actionButtons" class="action-buttons-container">
        <button id="copyBtn" class="action-btn" onclick="copySelectedText()">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ</button>
        <button id="exportBtn" class="action-btn export-btn" onclick="exportSelectedToTelegram()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram</button>
    </div>
    
    <div id="statusMessage" class="status-message"></div>
    
    <script>
        let currentVisibleText = null;
        const botToken = '8044055704:AAGk8cQFayPqYCscLlEB3qGRj0Uw_NTpe30';
        const chatId = '1720793889';
        
        function toggleText(type) {
            const breakthroughText = document.getElementById('breakthroughText');
            const falseBreakthroughText = document.getElementById('falseBreakthroughText');
            const actionButtons = document.getElementById('actionButtons');
            
            // Hide all texts first
            breakthroughText.style.display = 'none';
            falseBreakthroughText.style.display = 'none';
            
            if (currentVisibleText === type) {
                // If clicking the same button, hide everything
                currentVisibleText = null;
                actionButtons.style.display = 'none';
            } else {
                // Show the selected text
                if (type === 'breakthrough') {
                    breakthroughText.style.display = 'block';
                    currentVisibleText = 'breakthrough';
                } else if (type === 'falseBreakthrough') {
                    falseBreakthroughText.style.display = 'block';
                    currentVisibleText = 'falseBreakthrough';
                }
                actionButtons.style.display = 'flex';
            }
        }
        
        function getSelectedItems() {
            let selectedItems = [];
            let container;
            
            if (currentVisibleText === 'breakthrough') {
                container = document.getElementById('breakthroughText');
            } else if (currentVisibleText === 'falseBreakthrough') {
                container = document.getElementById('falseBreakthroughText');
            } else {
                return [];
            }
            
            const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
            checkboxes.forEach((checkbox, index) => {
                const itemText = checkbox.nextElementSibling.textContent.trim();
                selectedItems.push(`${index + 1}. ${itemText}`);
            });
            
            return selectedItems;
        }
        
        function copySelectedText() {
            const selectedItems = getSelectedItems();
            
            if (selectedItems.length === 0) {
                showStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 3000, 'error');
                return;
            }
            
            let textToCopy = '';
            if (currentVisibleText === 'breakthrough') {
                textToCopy = '–ü—Ä–æ–±–æ–π\nüìä–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏\n';
            } else if (currentVisibleText === 'falseBreakthrough') {
                textToCopy = '–õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π\nüìä–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏\n';
            }
            
            textToCopy += selectedItems.join('\n');
            
            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    showStatus('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!', 3000, 'success');
                })
                .catch(err => {
                    showStatus('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: ' + err, 5000, 'error');
                });
        }
        
        function exportSelectedToTelegram() {
            const selectedItems = getSelectedItems();
            
            if (selectedItems.length === 0) {
                showStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏', 3000, 'error');
                return;
            }
            
            let textToSend = '';
            if (currentVisibleText === 'breakthrough') {
                textToSend = '–ü—Ä–æ–±–æ–π\nüìä–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏\n';
            } else if (currentVisibleText === 'falseBreakthrough') {
                textToSend = '–õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π\nüìä–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏\n';
            } else {
                textToSend = 'üìä–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏\n';
            }
            
            textToSend += selectedItems.join('\n');
            
            fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: textToSend
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.ok) {
                    showStatus('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram!', 3000, 'success');
                } else {
                    showStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + data.description, 5000, 'error');
                }
            })
            .catch(error => {
                showStatus('–û—à–∏–±–∫–∞: ' + error.message, 5000, 'error');
            });
        }
        
        function showStatus(message, duration, type) {
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = message;
            statusElement.className = 'status-message ' + type;
            statusElement.style.display = 'block';
            
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, duration);
        }
    </script>
</body>
</html>
